#summary Configuration of symmetric ciphers.

= Key Generator =

{{{
    <crypt:symmetricKeyGenerator id="generator" algorithm="DESede"/>
}}}

`DESede` (triple DES) is the default algorithm and can be omitted.

A symmetric key can then be generated like this:

{{{
public class MyKeyGenerator {

    @Autowired
    private KeyGenerator generator;

    public void createANewKey() {
        byte[] key = generator.generate();
    }
}
}}}

Because you don't usually work directly with byte arrays, but rather with a base64 encoded version of such data, there also is a base64 version of the key generator:

{{{
    <crypt:b64SymmetricKeyGenerator id="generator" algorithm="DESede"/>
}}}

Here is an usage example:

{{{
public class MyBase64KeyGenerator {

    @Autowired
    private Base64EncodedKeyGenerator generator;

    public void generateANewKey() {
        String b64key = generator.generate();
    }
}
}}}

= Message Encryption =

{{{
    <crypt:symmetricCipherer id="encrypter" keyAlgorithm="DESede"     
     cipherAlgorithm="DESede/CBC/PKCS5Padding" mode="ENCRYPT"/>
}}} 

Again, `DESede` is the default key algorithm and can be omitted. `DESede/CBC/PKCS5Padding` (triple DES with cipher block chaining and PKCS#5 padding) is the default cipher algorithm and can be omitted.

Here is an example usage of the encrypter:

{{{
public class MyEncrypter {

    @Autowired
    private Cipherer encrypter;

    // initialization vector
    private static final byte[] iv = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    // encryption key
    private static final byte[] key = new byte[] {...};

    public void encrypt(byte[] clearTextMessage) {
        byte[] encryptedMessage = encrypter.encrypt(key, iv, clearTextMessage);
    }
}
}}}

Decrypting a message is a done using the same interface as for encrypting. The only difference is that the underlying mode of operation is set in configuration to DECRYPT:

{{{
    <crypt:symmetricCipherer id="decrypter" keyAlgorithm="DESede"
     cipherAlgorithm="DESede/CBC/PKCS5Padding" mode="DECRYPT"/>
}}}

And an example implementation might be:

{{{
public class MyDecrypter {

    @Autowired
    private Cipherer decrypter;

    // initialization vector
    private static final byte[] iv = new byte[] {1, 2, 3, 4, 5, 6, 7, 8};
    // encryption key
    private static final byte[] key = new byte[] {...};

    public void decrypt(byte[] encryptedMessage) {
        byte[] clearTextMessage = decrypter.encrypt(key, iv, encryptedMessage);
    }
}
}}}

Because you don't usually work directly with byte arrays, but rather with a base64 encoded version of such data, there also is a base64 version of the cipherer:

{{{
    <crypt:b64SymmetricCipherer id="encrypter" keyAlgorithm="DESede"
     cipherAlgorithm="DESede/CBC/PKCS5Padding" mode="ENCRYPT"/>
    <crypt:b64SymmetricCipherer id="decrypter" keyAlgorithm="DESede"
     cipherAlgorithm="DESede/CBC/PKCS5Padding" mode="DECRYPT"/>
}}}

An example implementation might be:

{{{
public class MyBase64Encrypter {

    @Autowired
    private Base64EncodedCipherer encrypter;

    @Autowired
    private Base64EncodedCipherer decrypter;

    // base64 encoded initialization vector
    private static final String iv = "AQIDBAUGAQI=";

    // base64 encoded encryption key
    private static final String key = "Rs3xEA16I52XJpsWwkw4GrB8l6FiVGK/";

    public void doSomething() {
        String b64encryptedMessage = encrypter.encrypt(key, iv, "a secret message");
        String decryptedMessage = decrypter.encrypt(key, iv, b64encryptedMessage);
    }
}
}}}

= Message Encryption With Static Keys =

If the encryption key is static, you can configure it in xml:

{{{
<crypt:symmetricCiphererWithStaticKey
        id="encrypter"
        keyAlgorithm="DESede" cipherAlgorithm="DESede/CBC/PKCS5Padding"
        key="Rs3xEA16I52XJpsWwkw4GrB8l6FiVGK/"
        initializationVector="AQIDBAUGAQI="
        mode="ENCRYPT"/>

<crypt:symmetricCiphererWithStaticKey
        id="decrypter"
        keyAlgorithm="DESede" cipherAlgorithm="DESede/CBC/PKCS5Padding"
        key="Rs3xEA16I52XJpsWwkw4GrB8l6FiVGK/"
        initializationVector="AQIDBAUGAQI="
        mode="DECRYPT"/>
}}}

The initialization vector and key strings must be base64 encoded. An example implementation of the above might be:

{{{
public class MyCiphererWithStaticKey {

    @Autowired
    private CiphererWithStaticKey encrypter;

    @Autowired
    private CiphererWithStaticKey decrypter;

    public void doSomething() {
        final byte[] message = new byte[] {1, 3};
        byte[] encryptedMessage = encrypter.encrypt(message);
        byte[] decryptedMessage = decrypter.encrypt(encryptedMessage);
    }
}
}}}

The base64 version of the above is as follows:

{{{
<crypt:b64SymmetricCiphererWithStaticKey
        id="encrypter" keyAlgorithm="DESede"
        cipherAlgorithm="DESede/CBC/PKCS5Padding"
        key="Rs3xEA16I52XJpsWwkw4GrB8l6FiVGK/"
        initializationVector="AQIDBAUGAQI="
        mode="ENCRYPT"/>

<crypt:b64SymmetricCiphererWithStaticKey
        id="decrypter" keyAlgorithm="DESede"
        cipherAlgorithm="DESede/CBC/PKCS5Padding"
        key="Rs3xEA16I52XJpsWwkw4GrB8l6FiVGK/"
        initializationVector="AQIDBAUGAQI="
        mode="DECRYPT"/>
}}}

An example implementation might be:

{{{
public class MyBase64EncodedCiphererWithStaticKey {

    @Autowired
    private Base64EncodedCiphererWithStaticKey encrypter;

    @Autowired
    private Base64EncodedCiphererWithStaticKey decrypter;

    public void testCipher() {
        final String message = "this is a top-secret message";
        String b64encryptedMessage = encrypter.encrypt(message);
        String decryptedMessage = decrypter.encrypt(b64encryptedMessage);
    }
}
}}}