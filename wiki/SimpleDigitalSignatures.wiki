#summary Configuration of digital signature signers and verifiers
#labels Featured

= Simple Signer =

{{{
    <crypt:keystore id="keystore" location="classpath:keystore.jks" password="password"/>
    <crypt:privateKey id="privateKey" keystore-ref="keystore" alias="test" password="password"/>
    <crypt:signer id="signer" privateKey-ref="privateKey" algorithm="SHA1withRSA"/>
}}}

`SHA1withRSA` is the default algorithm and can be omitted.

The signer can then be used like this:

{{{
public class MyBusinessSigner {

    @Autowired
    private Signer signer;

    public void myBusinessMethod() {
        // I am not a very useful business method but 
        // I can do digital signatures!
        byte[] signature = signer.sign(messageToBeTrusted);
    }
}
}}}

Because you don't usually work directly with byte arrays, but rather with a base64 encoded version of such data, there also is a base64 version of the signer.

{{{
    <crypt:b64Signer id="signer" privateKey-ref="privateKey" algorithm="SHA1withRSA"/>
}}}

Here is an usage example:

{{{
public class MyBase64BusinessSigner {

    @Autowired
    private Base64EncodedSigner signer;

    public void myBusinessMethod(String clientName) {
        String messageToBeTrusted = "Please pay 250 euro to " + clientName;
        String b64signature = signer.sign(messageToBeTrusted);
    }
}
}}}

= Simple Verifier =

{{{
    <crypt:keystore id="keystore" location="classpath:keystore.jks" password="password"/>
    <crypt:publicKey id="publicKey" keystore-ref="keystore" alias="test"/>
    <crypt:verifier id="verifier" publicKey-ref="publicKey" algorithm="SHA1withRSA"/>
}}} 

Again, `SHA1withRSA` is the default and can be omitted.

Here is an example usage of the verifier:

{{{
public class MyBusinessVerifier {

    @Autowired
    private Verifier verifier;

    public void myBusinessMethod() {
        // I am not a very useful business method but 
        // I can do digital signatures!
        boolean verified = verifier.verify(messageToBeTrusted, signature);
    }
}
}}}

The base64 equivalent of the above would be:

{{{
    <crypt:b64Verifier id="verifier" publicKey-ref="publicKey" algorithm="SHA1withRSA"/>
}}}

And an example implementation might be:

{{{
public class MyBase64BusinessVerifier {

    @Autowired
    private Base64EncodedVerifier verifier;

    public void myBusinessMethod(String message, String signature) {
        if (verifier.verify(message, signature) {
            proceedWithPayment(message);
        } else {
            callTheCops("someone is trying to steal our money!");
        }
    }
}
}}}

