#summary Key Store Configuration.
#labels Phase-Deploy
#sidebar TableOfContents

<wiki:toc max_depth="1" />

= Keystore =

You can configure as many keystores as you need:

{{{
    <crypt:keystore id="fooKeystore" location="classpath:keystore-foo.jks" password="password" type="JKS"/>
    <crypt:keystore id="barKeystore" location="file:/opt/keystore-bar.jks" password="password"/>
}}}

  * `JKS` is the default keystore type if no `type` attribute is specified
  * the `location` attribute follows the Spring resources conventions (see table 4.1 in the [http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/resources.html#resources-resourceloader Spring reference documentation] for an overview) 

= Base64 Keystore =

A keystore can also be embedded in the xml config file itself:

{{{
    <crypt:b64Keystore id="keystore" password="password" type="JKS">
        <crypt:file>
            /u3+7QAAAAIAAAABAAAAAQAEdGVzdAAAASazcnA7AAACvTCCArkwDgYKKwYBBAEq
            AhEBAQUABIICpXWgVfoBjEXhW7TUr4i8npIcnRfWKy8i5Mly28DaiNQIcbUmqVol
            hfjbmoz930cT+puKpVmt+Rv28MEWEHDH3JFixM7aQgjmMsXL4z0AE/cgW0bn5C3P
            LBrvG3Ieq0Kj1ZebLuBtHM92LwrkctTq3dvy6sCQHLtpefInmdjqfAbJnls/y2RX
            PoNwwwu6yIWw6GnXQ41TjhIOcXhmog4e7aH+2Ch+6vFsnNf0hHDdGI/PPvGnIvf9
            kGb1a9894sy1xApi1oV/OzH3ZZ8WKlXZmycke3QtVfREFRv22400tayoFyQzCbNE
            jNpzExRhHd5W1fEaVBXIjw73eB8l31XgIQlBFnUBkBXkQ56nYPRL6ODPNIYEYJSE
            XJnN8POgc+TFEisP4MK4fzr7pb5iVBokbWMS6ixCayaUSksn/U8mtAQSSy3Wx8KS
            0S+HvHCv7g8qflLuQD3TC7dBF4ai8O7U4TXljqugW53UzmcSHbY+3js2R3SYdOxI
            1CZ+Ly59WYHsAwtVhor1QFqmx1GwI/OJFy5cdd0Kcn2IKcQwEuTZcNEL7ZzBSrKQ
            WQ/Vysn2rHr/iWZBg7H/8Ybk3yBoPvn9xi6IFOV74a9EPn3eb8h4yF6yFLieIKXo
            2pM1BFmvkbQYcg8HhWWb8ppJC5He2j6LCmhMBciVY5ltSXe8siyPqGi1uSNeqduv
            O+JGfCgpcAezpGL2KFCbcHyISPlhDERKWdI560OR8ytQXmX996OcM34aRl0D+cgL
            hblZOzXCv9bj9ePWMTytF/YeVebsjU4clxLWnGBU9hbkvdBTf8q795DAcbqnL6QC
            mo+1wq8OZTxRcF2Er97A3QCSrvK5hWrG2rkUcw55TSPeoaobj6YgYOnv1dpuHCXs
            6J8V/b4FGCDn2XAcgEUOAAAAAQAFWC41MDkAAAI5MIICNTCCAZ6gAwIBAgIES3GF
            tjANBgkqhkiG9w0BAQUFADBfMQswCQYDVQQGEwJJVDELMAkGA1UECBMCUk0xDTAL
            BgNVBAcTBFJvbWUxDTALBgNVBAoTBE5vbmUxDTALBgNVBAsTBE5vbmUxFjAUBgNV
            BAMTDU1pcmtvIENhc2VydGEwHhcNMTAwMjA5MTU1NjM4WhcNMTAwNTEwMTU1NjM4
            WjBfMQswCQYDVQQGEwJJVDELMAkGA1UECBMCUk0xDTALBgNVBAcTBFJvbWUxDTAL
            BgNVBAoTBE5vbmUxDTALBgNVBAsTBE5vbmUxFjAUBgNVBAMTDU1pcmtvIENhc2Vy
            dGEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKjtmUJ2Y06oi/e90tgfvNLt
            TadWre36dsKvhrhxaXtcGC54cjaN/r2iAlLnTrqJN9K7cWYHI5Rh1bYZzOSGY2PX
            6DoLis5OsDzP/9rXZRMVfNynLsjTeIkG579qht6j6JAtyvHIdH5hrDjE32xx/X78
            iLTYMAuXb+Uo8VNZTft7AgMBAAEwDQYJKoZIhvcNAQEFBQADgYEApXFvvASzzw4G
            VmbJB1os/PnKAD82WpDDP6pjDOE4ALAzJoP71uqvLffr4qRBmMOMX6IGmLBckYRS
            axQ8OCU6QBU4RU1cY/xxrXgfKditL8SAY4Ll07uwoilBJqxM9clT0AtYwxTgS5KF
            7bw6Q7mk5Ki1d9hpmBBn+HGB9+MCqTCz/VETRUu45lQPtwUuwvOmff2WHg==
        </crypt:file>
    </crypt:b64Keystore>
}}}

The Base64 block above was generated with:

{{{
$ openssl enc -base64 -in keystore.jks
}}}

= Keystore Registry =

In some cases you might need to refer to a keystore by a logical name:

{{{
    <crypt:keystore id="keystore1" location="classpath:keystore1.jks" password="password"/>
    <crypt:keystore id="keystore2" location="classpath:keystore2.jks" password="password"/>

    <crypt:keystoreRegistry id="keystoreRegistry" entries-ref="entries"/>

    <util:map id="entries">
        <entry key="keystoreOne" value-ref="keystore1"/>
        <entry key="keystoreTwo" value-ref="keystore2"/>
    </util:map>
}}}

Here I have configured two keystores, one with the logical name `keystoreOne` and the other with the name `keystoreTwo`.

= Keystore Choosers =

When using the keystore registry, all interfaces which make use of it will require you to implement a `KeyStoreChooser` to provide your own mapping to the keystore logical names. This allows you to do the keystore mapping in complete freedom. Here is an example implementation of the interface:

{{{
public class MyKeyStoreChooser implements KeyStoreChooser {

    private static final Map<String, String> map = new HashMap<String, String>();

    static {
        map.put("businessIdOne", "keystoreOne");
        map.put("businessIdTwo", "keystoreTwo");
    }

    private String businessId;

    public void setBusinessId(String businessId) {
        this.businessId = businessId;
    }

    public String getKeyStoreName() {
        return map.get(businessId);
    }
}
}}}
