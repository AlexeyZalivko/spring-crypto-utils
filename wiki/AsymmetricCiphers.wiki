#summary Configuration of asymmetric ciphers.
#sidebar TableOfContents

<wiki:toc max_depth="1" />

= Message Encryption =

{{{
    <crypt:keystore id="keystore" location="classpath:keystore.jks" password="password"/>

    <crypt:privateKey id="privateKey" keystore-ref="keystore" alias="test" password="password"/>

    <crypt:asymmetricCipherer id="encrypter" algorithm="RSA" 
     mode="ENCRYPT" key-ref="privateKey"/>
}}} 

`RSA` is the default algorithm and can be omitted.

Here is an example usage of the encrypter:

{{{
public class MyEncrypter {

    @Autowired
    private Cipherer encrypter;

    public void encrypt(byte[] clearTextMessage) {
        byte[] encryptedMessage = encrypter.encrypt(clearTextMessage);
    }
}
}}}

Decrypting a message is a done using the same interface as for encrypting. The only difference is that the underlying mode of operation is set in configuration to DECRYPT:

{{{
    <crypt:keystore id="keystore" location="classpath:keystore.jks" password="password"/>
    <crypt:publicKey id="publicKey" keystore-ref="keystore" alias="test"/>
    <crypt:asymmetricCipherer id="decrypter" algorithm="RSA"
      mode="DECRYPT" key-ref="publicKey"/>
}}}

And an example implementation might be:

{{{
public class MyDecrypter {

    @Autowired
    private Cipherer decrypter;

    public void decrypt(byte[] encryptedMessage) {
        byte[] clearTextMessage = decrypter.encrypt(encryptedMessage);
    }
}
}}}

= Base64 Message Encryption =

Because you don't usually work directly with byte arrays, but rather with a base64 encoded version of such data, there also is a base64 version of the cipherer:

{{{
    <crypt:b64AsymmetricCipherer id="encrypter" mode="ENCRYPT" 
     key-ref="privateKey"/>
    <crypt:b64AsymmetricCipherer id="decrypter" mode="DECRYPT" 
     key-ref="publicKey"/>
}}}

An example implementation might be:

{{{
public class MyBase64Encrypter {

    @Autowired
    private Base64EncodedCipherer encrypter;

    @Autowired
    private Base64EncodedCipherer decrypter;

    public void doSomething() {
        String b64encryptedMessage = encrypter.encrypt("a secret message");
        String decryptedMessage = decrypter.encrypt(b64encryptedMessage);
    }
}
}}}

= Message Encryption With Chooser By Key Id =

If your encryption key is not static as in the examples above, you can configure a mapping by logical name in xml:

{{{
    <crypt:keystore id="keystore" location="classpath:keystore.jks" password="password"/>

    <util:map id="keyMap">
        <entry key="publicKeyId">
            <crypt:publicKey keystore-ref="keystore" alias="test"/>
        </entry>
        <entry key="privateKeyId">
            <crypt:privateKey keystore-ref="keystore" alias="test" password="password"/>
        </entry>
    </util:map>

    <crypt:asymmetricCiphererWithChooserByKeyId id="encrypter" mode="ENCRYPT" keyMap-ref="keyMap"/>

    <crypt:asymmetricCiphererWithChooserByKeyId id="decrypter" mode="DECRYPT" keyMap-ref="keyMap"/>
}}}

An example implementation of the above might be:

{{{
public class MyCiphererWithChooserByKeyId {

    @Autowired
    private CiphererWithChooserByKeyId encrypter;

    @Autowired
    private CiphererWithChooserByKeyId decrypter;

    public void doSomething() {
        final byte[] message = new byte[] {1, 3};
        byte[] encryptedMessage = encrypter.encrypt("publicKeyId", message);
        byte[] decryptedMessage = decrypter.encrypt("privateKeyId", encryptedMessage);
    }
}
}}}

= Base64 Message Encryption With Chooser By Key Id =

The base64 version of the above is as follows:

{{{
    <crypt:b64AsymmetricCiphererWithChooserByKeyId id="encrypter" mode="ENCRYPT" keyMap-ref="keyMap"/>

    <crypt:b64AsymmetricCiphererWithChooserByKeyId id="decrypter" mode="DECRYPT" keyMap-ref="keyMap"/
}}}

An example implementation might be:

{{{
public class MyBase64EncodedCiphererWithChooserByKeyId {

    @Autowired
    private Base64EncodedCiphererWithChooserByKeyId encrypter;

    @Autowired
    private Base64EncodedCiphererWithChooserByKeyId decrypter;

    public void testCipher() {
        final String message = "this is a top-secret message";
        String b64encryptedMessage = encrypter.encrypt("publicKeyId", message);
        String decryptedMessage = decrypter.encrypt("privateKeyId", b64encryptedMessage);
    }
}
}}}
